'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoCorrection = exports.numberToLetter = exports.letterToNumber = void 0;
const createFieldParser_1 = require("./createFieldParser");
const numberToLetterMismatches = {
    '8': 'B',
    '6': 'G',
    '0': 'O',
    '1': 'I',
    '5': 'S',
    '2': 'Z',
};
const letterToNumberMismatches = {
    B: '8',
    G: '6',
    O: '0',
    I: '1',
    S: '5',
    Z: '2',
};
function letterToNumber(char) {
    if (letterToNumberMismatches[char]) {
        return letterToNumberMismatches[char];
    }
    return char;
}
exports.letterToNumber = letterToNumber;
function numberToLetter(char) {
    if (numberToLetterMismatches[char]) {
        return numberToLetterMismatches[char];
    }
    return char;
}
exports.numberToLetter = numberToLetter;
function autoCorrection(source, fieldOptions) {
    let correctedText = '';
    const autocorrect = [];
    const chars = source.split('');
    chars.forEach((char, i) => {
        if (fieldOptions.type === createFieldParser_1.fieldTypes.ALPHABETIC) {
            const correctedChar = numberToLetter(char);
            if (correctedChar !== char) {
                autocorrect.push({
                    line: fieldOptions.line,
                    column: fieldOptions.start + i,
                    original: char,
                    corrected: correctedChar,
                });
            }
            correctedText += correctedChar;
        }
        else if (fieldOptions.type === createFieldParser_1.fieldTypes.NUMERIC) {
            const correctedChar = letterToNumber(char);
            if (correctedChar !== char) {
                autocorrect.push({
                    line: fieldOptions.line,
                    column: fieldOptions.start + i,
                    original: char,
                    corrected: correctedChar,
                });
            }
            correctedText += correctedChar;
        }
        else {
            correctedText += char;
        }
    });
    return { correctedText, autocorrect };
}
exports.autoCorrection = autoCorrection;
//# sourceMappingURL=autoCorrection.js.map